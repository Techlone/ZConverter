package org.prank;

import stanhebben.zenscript.ZenParsedFile;
import stanhebben.zenscript.ZenTokener;
import stanhebben.zenscript.definitions.Import;
import stanhebben.zenscript.definitions.ParsedFunction;
import stanhebben.zenscript.parser.ParseException;
import stanhebben.zenscript.statements.Statement;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static stanhebben.zenscript.statements.Statement.nl;

public class ZConverter {
    private final static String UTF8 = "UTF-8";
    private final static String INDENT = "    ";
    public static int IndentDeep = 0;

    public static String convert(String input) {
        try {
            Path path;
            try {
                path = Paths.get(input);
            } catch (Exception ignored) {
                return convertScript(input, "input");
            }
            File src = path.toFile();
            if (!src.isDirectory()) return input + " is not a folder!";

            File[] files = src.listFiles();
            if (files == null || files.length == 0) return "No files found";

            File[] zsFiles = Arrays.stream(files).filter(file -> file.getName().endsWith(".zs")).toArray(File[]::new);
            if (zsFiles.length == 0) return "No scripts found";

            StringBuilder convertedFiles = new StringBuilder("Converted files:" + nl);
            for (File file : zsFiles) {
                String zsCode = readAllText(file);
                String luaCode = convertScript(zsCode, file.getName());
                String luaPath = toLua(file.getAbsolutePath());
                writeAllText(luaPath, luaCode);
                convertedFiles.append(luaPath).append(nl);
            }
            return convertedFiles.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return "error :/";
        }
    }

    private static void writeAllText(String path, String text) throws IOException {
        Files.write(Paths.get(path), text.getBytes(UTF8));
    }

    private static String toLua(String path) {
        return path.substring(0, path.lastIndexOf('.')) + ".lua";
    }

    private static String readAllText(File file) throws IOException {
        return new String(Files.readAllBytes(file.toPath()), UTF8);
    }

    private static String convertScript(String input, String filename) throws IOException {
        ZenTokener zenTokener = new ZenTokener(input, new CompileEnv());
        ZenParsedFile zenParsedFile = null;
        try {
            zenParsedFile = new ZenParsedFile(filename, "classname", zenTokener, new GlobalEnv());
        } catch (ParseException e) {
            e.printStackTrace();
        }

        if (zenParsedFile == null) return "";

        StringBuilder sb = new StringBuilder("-- Autogenerated Lua script:").append(nl);
        for (Import importStatement : zenParsedFile.getImports()) {
            String luaImport = importStatement.toLua();
            if (luaImport.equals("")) continue;
            sb.append(luaImport).append(nl);
        }
        for (Map.Entry<String, ParsedFunction> pair : zenParsedFile.getFunctions().entrySet()) {
            sb.append(pair.getValue()).append(nl);
        }
        for (Statement statement : zenParsedFile.getStatements()) {
            sb.append(statement).append(nl);
        }
        return sb.toString();
    }

    public static String join(List<?> list) {
        return join(list, ", ");
    }

    public static String join(List<?> list, String delimiter) {
        return list.stream().map(Object::toString).collect(Collectors.joining(delimiter));
    }

    public static String getIndent() {
        return IndentDeep == 0 ? "" : IndentDeep == 1 ? INDENT : repeat(INDENT, IndentDeep);
    }

    private static String repeat(String str, int times) {
        return new String(new char[times]).replace("\0", str);
    }
}
